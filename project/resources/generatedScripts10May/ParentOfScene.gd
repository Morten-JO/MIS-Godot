extends Node2D

#generated by MIS-Godot
#minimum build version 0.1
#project name: PingPongPrototype10May

onready var ParentOfScene_KinematicBody2D = get_node("KinematicBody2D")
onready var KinematicBody2D_ParentOfScene_CollisionShape2D = get_node("KinematicBody2D/CollisionShape2D")
onready var KinematicBody2D_ParentOfScene_Sprite = get_node("KinematicBody2D/Sprite")
onready var ParentOfScene_BackGround = get_node("BackGround")
onready var ParentOfScene_Bat1 = get_node("Bat1")
onready var Bat1_ParentOfScene_Sprite = get_node("Bat1/Sprite")
onready var Bat1_ParentOfScene_KinematicBody2D = get_node("Bat1/KinematicBody2D")
onready var KinematicBody2D_ParentOfScene_CollisionShape2D = get_node("KinematicBody2D/CollisionShape2D")
onready var ParentOfScene_Bat2 = get_node("Bat2")
onready var Bat2_ParentOfScene_Sprite = get_node("Bat2/Sprite")
onready var Bat2_ParentOfScene_KinematicBody2D = get_node("Bat2/KinematicBody2D")
onready var KinematicBody2D_ParentOfScene_CollisionShape2D = get_node("KinematicBody2D/CollisionShape2D")
onready var ParentOfScene_Ball = get_node("Ball")
onready var ParentOfScene_Wall = get_node("Wall")
onready var Wall_ParentOfScene_CollisionShape2D = get_node("Wall/CollisionShape2D")
onready var ParentOfScene_Wall1 = get_node("Wall1")
onready var Wall1_ParentOfScene_CollisionShape2D = get_node("Wall1/CollisionShape2D")
onready var ParentOfScene_Wall2 = get_node("Wall2")
onready var Wall2_ParentOfScene_CollisionShape2D = get_node("Wall2/CollisionShape2D")
onready var ParentOfScene_Wall3 = get_node("Wall3")
onready var Wall3_ParentOfScene_CollisionShape2D = get_node("Wall3/CollisionShape2D")


var tcp_connection = StreamPeerTCP.new()
var base_server_ip = "localhost"
var team_id
var room_begun = false
var time_counter = 0

const TIMEOUT_DURATION_CONNECT = 10


func _ready():
	pass

func _process(delta):
	if tcp_connection.is_connected() && tcp_connection.get_available_bytes() > 0:
		var received_message = tcp_connection.get_utf8_string(tcp_connection.get_available_bytes())
		var splitted_strings = received_message.split("\n")
		for i in range(splitted_strings.size()):
			if("roomcreate" in splitted_strings[i]):
				var split_messages = splitted_strings[i].split(" ")
				var room_id = split_messages[1]
				var room_scene_id = split_messages[2]
				var total_players = split_messages[3]
				team_id = int(split_messages[4])
				roomBegun(split_messages)

			if("node" in splitted_strings[i]):
				var split_message = splitted_strings[i].split(" ")
				#KinematicBody2D
				if int(split_message[2]) == 1:
					if team_id == 0:
						ParentOfScene_KinematicBody2D.set_pos(Vector2(float(split_message[4]), float(split_message[5])))
				#Bat1
				if int(split_message[2]) == 5:
					if team_id == 0:
						ParentOfScene_Bat1.set_pos(Vector2(float(split_message[4]), float(split_message[5])))
				#Bat2
				if int(split_message[2]) == 9:
					if team_id == 1:
						ParentOfScene_Bat2.set_pos(Vector2(float(split_message[4]), float(split_message[5])))
				pass



	if room_begun:
		if team_id == 0:
			tcp_connection.put_utf8_string("[node] KinematicBody2D 1 [transform2d] "+str(ParentOfScene.get_pos().x)+" "+str(ParentOfScene.get_pos().y)+" "+str(ParentOfScene.get_rot())+" "+str(ParentOfScene.get_scale().x)+" "+str(ParentOfScene.get_scale().y)

			tcp_connection.put_utf8_string("[node] Bat1 5 [transform2d] "+str(ParentOfScene.get_pos().x)+" "+str(ParentOfScene.get_pos().y)+" "+str(ParentOfScene.get_rot())+" "+str(ParentOfScene.get_scale().x)+" "+str(ParentOfScene.get_scale().y)

			pass
		if team_id == 1:
			tcp_connection.put_utf8_string("[node] Bat2 9 [transform2d] "+str(ParentOfScene_KinematicBody2D.get_pos().x)+" "+str(ParentOfScene_KinematicBody2D.get_pos().y)+" "+str(ParentOfScene_KinematicBody2D.get_rot())+" "+str(ParentOfScene_KinematicBody2D.get_scale().x)+" "+str(ParentOfScene_KinematicBody2D.get_scale().y)

			pass
	pass

	if tcp_connection.get_status() == 1
		time_counter = time_counter + delta

	if time_counter > TIMEOUT_DURATION_CONNECT:
		tcp_connection.disconnect()
		set_process(false)


func connectToServer():
	tcp_connection.connect(localhost, 1234)	set_process(true)


func roomBegun(data):
	room_begun = true	pass

func onReceiveQueueStart(data):
	pass

func onReceiveQueueEnd(data):
	pass

func sendQueueStartRequest(data):
	pass

func onReceiveRefreshMainScene_1():
	pass

func onReceiveRefreshMainScene_5():
	pass

func onReceiveRefreshMainScene_9():
	pass

func updateNodeTeam_0_MainScene_1():
	pass

func updateNodeTeam_0_MainScene_5():
	pass

func updateNodeTeam_1_MainScene_9():
	pass


