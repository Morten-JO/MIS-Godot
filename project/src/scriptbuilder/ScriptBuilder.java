package scriptbuilder;

import data_types.MISScene;
import nodes.MISNode;
import nodes.MISNode2D;
import project.MISProject;
import receivers.MISReceiverAll;
import receivers.MISReceiverPerson;
import receivers.MISReceiverTeam;

public class ScriptBuilder {

	private static String tcpConnectionVariableName = "tcp_connection";
	private static String tcpConnectionVariableIntialize = "StreamPeerTCP.new()";
	
	private static String baseServerIpVariableName = "base_server_ip";
	private static String teamIdVariableName = "team_id";
	private static String timeCounterVariableName = "time_counter";
	private static String roomBegunVariableName = "room_begun";
	
	private static String timeoutDurationConst = "TIMEOUT_DURATION_CONNECT = 10";
	
	public static void main(String[] args) {
	}
	
	public static  boolean buildScript(MISProject project, MISScene scene, String location, String name, String nodeType, String ip){
		
		String scriptString = "";
		
		//Create pre variable things
		scriptString = "extends "+nodeType+createLineBreaks(2);
		scriptString += "#generated by MIS-Godot"+createLineBreaks(1);
		scriptString += "#minimum build version "+project.minimumBuildVersion+createLineBreaks(1);
		scriptString += "#project name: "+project.projectName+createLineBreaks(2);
		
		//Load onready node variables
		for(int i = 1; i < scene.nodeList.size(); i++){
			String onreadyString = "onready var ";
			String nameOfNode = "";
			MISNode node = scene.nodeList.get(i);
			while(node.parent != null){
				nameOfNode += node.parent.name+"_";
				node = node.parent;
			}
			nameOfNode += scene.nodeList.get(i).name;
			onreadyString += nameOfNode+" = get_node(\"";
			String locationNode = "";
			node = scene.nodeList.get(i);
			while(node.parent != null && node.parent.index != 0){
				locationNode += node.parent.name+"/";
				node = node.parent;
			}
			locationNode += scene.nodeList.get(i).name+"\")";
			onreadyString += locationNode+createLineBreaks(1);
			scriptString += onreadyString;
		}
		
		scriptString += createLineBreaks(2);
		
		
		
		//Create variables and variablenames
		scriptString += "var "+tcpConnectionVariableName+" = "+tcpConnectionVariableIntialize+createLineBreaks(1);
		scriptString += "var "+baseServerIpVariableName+" = "+"\""+ip+"\""+createLineBreaks(1);
		scriptString += "var "+teamIdVariableName+createLineBreaks(1);
		scriptString += "var "+roomBegunVariableName+" = false"+createLineBreaks(1);
		scriptString += "var "+timeCounterVariableName+" = 0";
		scriptString += createLineBreaks(2);
		
		//Create consts
		scriptString += "const "+timeoutDurationConst+createLineBreaks(1);
		
		scriptString += createLineBreaks(2);
		
		//Create ready func
		scriptString += "func _ready():"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass";
		
		scriptString += createLineBreaks(2);
		
		String receivedMessageVariableName = "received_message";
		
		//Create process function
		scriptString += "func _process(delta):"+createLineBreaks(1);
		
		//received messages
		scriptString += createIndentations(1)+"if "+tcpConnectionVariableName+".is_connected() && "+tcpConnectionVariableName+".get_available_bytes() > 0:"+createLineBreaks(1);
		scriptString += createIndentations(2)+"var "+receivedMessageVariableName+" = "+tcpConnectionVariableName+".get_utf8_string("+tcpConnectionVariableName+".get_available_bytes())"+createLineBreaks(1);
	
		//room_begun(refresh etc)
		scriptString += createIndentations(1)+"if "+roomBegunVariableName+":"+createLineBreaks(1);
		for(int i = 0; i < scene.roomSettings.teams; i++){
			scriptString += "if "+teamIdVariableName+" == "+i+":"+createLineBreaks(1);
			for(int j = 0; j < scene.nodeList.size(); j++){
				if(scene.nodeList.get(j).isControllable){
					if(scene.nodeList.get(j).controlReceiver instanceof MISReceiverTeam){
						MISReceiverTeam team = (MISReceiverTeam)scene.nodeList.get(j).controlReceiver;
						if(team.team == i){
							String nameOfNode = "";
							MISNode node = scene.nodeList.get(j);
							while(node.parent != null){
								nameOfNode += node.parent.name+"_";
								node = node.parent;
							}
							if(scene.nodeList.get(j) instanceof MISNode2D){
								MISNode2D node2D = (MISNode2D) scene.nodeList.get(j);
								scriptString += createIndentations(2)+tcpConnectionVariableName+put_utf8_string(node2D, nameOfNode)+createLineBreaks(1);
								scriptString += createIndentations(2)+"pass"+createLineBreaks(1);
							} else{
								System.out.println("not instanceof misnode2d line 109 in scriptbuilder");
							}
						}
					}
				}
			}
			
			
		}
		scriptString += createIndentations(2)+"pass";
		
		scriptString += createIndentations(1)+"pass";
		
		scriptString += createLineBreaks(2);
				
		
		//Create connect function
		scriptString += "func connectToServer():"+createLineBreaks(1);
		scriptString += createIndentations(1)+tcpConnectionVariableName+".connect("+ip+", "+project.basePort.port+")";
		
		scriptString += createLineBreaks(2);
		
		//create queue functions
		scriptString += "func onReceiveQueueStart(data):"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
		
		scriptString += "func onReceiveQueueEnd(data):"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
		
		scriptString += "func sendQueueStartRequest(data):"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
		
		//Create broadcast functions
		for(int i = 0; i < scene.broadcasts.size(); i++){
			scriptString += "func onReceiveBroadcast"+scene.broadcasts.get(i).getBroadcastName()+"(data):"+createLineBreaks(1);
			scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
		}
		
		//Create refresh functions
		for(int i = 0; i < scene.nodeList.size(); i++){
			if(scene.nodeList.get(i).shouldSendInformation){
				scriptString += "func onReceiveRefresh"+scene.name+"_"+i+"():"+createLineBreaks(1);
				scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
			}
		}
		
		//Create node control functions
		for(int i = 0; i < scene.nodeList.size(); i++){
			if(scene.nodeList.get(i).isControllable){
				if(scene.nodeList.get(i).controlReceiver instanceof MISReceiverAll){
					scriptString += "func updateNodeAll_"+scene.name+"_"+scene.nodeList.get(i).index+"():"+createLineBreaks(1);
					scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
				} else if(scene.nodeList.get(i).controlReceiver instanceof MISReceiverTeam){
					MISReceiverTeam receiver = (MISReceiverTeam)scene.nodeList.get(i).controlReceiver;
					scriptString += "func updateNodeTeam_"+receiver.team+"_"+scene.name+"_"+scene.nodeList.get(i).index+"():"+createLineBreaks(1);
					scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
				} else if(scene.nodeList.get(i).controlReceiver instanceof MISReceiverPerson){
					MISReceiverPerson receiver = (MISReceiverPerson)scene.nodeList.get(i).controlReceiver;
					scriptString += "func updateNodePerson_"+receiver.person+"_"+scene.name+"_"+scene.nodeList.get(i).index+"():"+createLineBreaks(1);
					scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
				}
			}
		}
		
		System.out.println("Script:");
		System.out.println(scriptString);
		return false;
	}
	
	private static String createLineBreaks(int linebreaks){
		String str = "";
		for(int i = 0; i < linebreaks; i++){
			str += System.lineSeparator();
		}
		return str;
	}
	
	private static String createIndentations(int indents){
		String str = "";
		for(int i = 0; i < indents; i++){
			str += "\t";
		}
		return str;
	}
	
	private static String put_utf8_string(MISNode2D node, String name){
		return ".put_utf8_string(\"[node] "+node.name+" "+node.index+" [transform2d] \"+str("+name+".get_pos().x)+\" \"+str("+name+".get_pos().y)+\" \"+str("+name+".get_rot())+\" \"+str("+name+".get_scale().x)+\" \"+str("+name+".get_scale().y)\n";
	}
	
}
