package scriptbuilder;

import data_types.MISScene;
import project.MISProject;
import receivers.MISReceiverAll;
import receivers.MISReceiverPerson;
import receivers.MISReceiverTeam;

public class ScriptBuilder {

	private static String tcpConnectionVariableName = "tcp_connection";
	private static String tcpConnectionVariableIntialize = "StreamPeerTCP.new()";
	
	private static String baseServerIpVariableName = "base_server_ip";
	
	private static String timeoutDurationConst = "TIMEOUT_DURATION_CONNECT = 10";
	
	public static void main(String[] args) {
	}
	
	public static  boolean buildScript(MISProject project, MISScene scene, String location, String name, String nodeType, String ip){
		
		String scriptString = "";
		
		//Create pre variable things
		scriptString = "extends "+nodeType+createLineBreaks(2);
		scriptString += "#generated by MIS-Godot"+createLineBreaks(1);
		scriptString += "#minimum build version "+project.minimumBuildVersion+createLineBreaks(1);
		scriptString += "#project name: "+project.projectName+createLineBreaks(2);
		
		//Create variables and variablenames
		scriptString += "var "+tcpConnectionVariableName+" = "+tcpConnectionVariableIntialize+createLineBreaks(1);
		scriptString += "var "+baseServerIpVariableName+" = "+"\""+ip+"\"";
		
		scriptString += createLineBreaks(2);
		
		//Create consts
		scriptString += "const "+timeoutDurationConst+createLineBreaks(1);
		
		scriptString += createLineBreaks(2);
		
		//Create ready func
		scriptString += "func _ready():"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass";
		
		scriptString += createLineBreaks(2);
		
		//Create process function
		scriptString += "func _process(delta):"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass";
		
		scriptString += createLineBreaks(2);
				
		
		//Create connect function
		scriptString += "func connectToServer():"+createLineBreaks(1);
		scriptString += createIndentations(1)+tcpConnectionVariableName+".connect("+ip+", "+project.basePort.port+")";
		
		scriptString += createLineBreaks(2);
		
		//create queue functions
		scriptString += "func onReceiveQueueStart(data):"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
		
		scriptString += "func onReceiveQueueEnd(data):"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
		
		scriptString += "func sendQueueStartRequest(data):"+createLineBreaks(1);
		scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
		
		//Create broadcast functions
		for(int i = 0; i < scene.broadcasts.size(); i++){
			scriptString += "func onReceiveBroadcast"+scene.broadcasts.get(i).getBroadcastName()+"(data):"+createLineBreaks(1);
			scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
		}
		
		//Create refresh functions
		for(int i = 0; i < scene.nodeList.size(); i++){
			if(scene.nodeList.get(i).shouldSendInformation){
				scriptString += "func onReceiveRefresh"+scene.name+"_"+i+"():"+createLineBreaks(1);
				scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
			}
		}
		
		//Create node control functions
		for(int i = 0; i < scene.nodeList.size(); i++){
			if(scene.nodeList.get(i).isControllable){
				if(scene.nodeList.get(i).controlReceiver instanceof MISReceiverAll){
					scriptString += "func updateNodeAll_"+scene.name+"_"+scene.nodeList.get(i).index+"():"+createLineBreaks(1);
					scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
				} else if(scene.nodeList.get(i).controlReceiver instanceof MISReceiverTeam){
					MISReceiverTeam receiver = (MISReceiverTeam)scene.nodeList.get(i).controlReceiver;
					scriptString += "func updateNodeTeam_"+receiver.team+"_"+scene.name+"_"+scene.nodeList.get(i).index+"():"+createLineBreaks(1);
					scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
				} else if(scene.nodeList.get(i).controlReceiver instanceof MISReceiverPerson){
					MISReceiverPerson receiver = (MISReceiverPerson)scene.nodeList.get(i).controlReceiver;
					scriptString += "func updateNodePerson_"+receiver.person+"_"+scene.name+"_"+scene.nodeList.get(i).index+"():"+createLineBreaks(1);
					scriptString += createIndentations(1)+"pass"+createLineBreaks(2);
				}
			}
		}
		
		System.out.println("Script:");
		System.out.println(scriptString);
		return false;
	}
	
	private static String createLineBreaks(int linebreaks){
		String str = "";
		for(int i = 0; i < linebreaks; i++){
			str += System.lineSeparator();
		}
		return str;
	}
	
	private static String createIndentations(int indents){
		String str = "";
		for(int i = 0; i < indents; i++){
			str += "\t";
		}
		return str;
	}
	
}
